//merge sort
#include<bits/stdc++.h>
#include<time.h>
using namespace std;

void merge(int arr[], int left, int mid, int right) 
{  
    int i, j, k; 
    int n1 = mid - left + 1; 
    int n2 =  right - mid; 

    int Left[n1], Right[n2]; 
  
    for (i = 0; i < n1; i++) 
        Left[i] = arr[left + i]; 
    for (j = 0; j < n2; j++) 
        Right[j] = arr[mid + 1+ j]; 
  
    i = 0;  
    j = 0; 
    k = left; 
    while (i < n1 && j < n2) 
    { 
        if (Left[i] <= Right[j]) 
        { 
            arr[k] = Left[i]; 
            i++; 
        } 
        else
        { 
            arr[k] = Right[j];  
            j++; 
        } 
        k++; 
    } 
    while (i < n1) 
    { 
        arr[k] = Left[i]; 
        i++; 
        k++; 
    } 
    while (j < n2) 
    { 
        arr[k] = Right[j]; 
        j++; 
        k++; 
    } 
} 
void mergeSort(int arr[], int left, int right) 
{ 
    if (left < right) 
    { 
        int mid = left+(right-left)/2; 
        mergeSort(arr, left, mid); 
        mergeSort(arr, mid+1, right); 
  
        merge(arr, left, mid, right); 
    } 
} 
  

void printArray(int A[], int size) 
{ 
    int i; 
    for (i=0; i < size; i++) 
        cout<<A[i]<<" "; 
    cout<<endl;
} 
int main() 
{ 
    int n;
    cout<<"Enter the size of array : ";
    cin>>n;
    int arr[n];
    for(int i=0 ; i<n ; i++)
    {
       arr[i]=rand()%10000;
    }
  
    cout<<"Given array is \n"; 
    printArray(arr, n); 
    clock_t start,end;
    start = clock();  
    mergeSort(arr, 0, n - 1); 
    end=clock();
    double time_taken = double (end -start )/ double (CLOCKS_PER_SEC);

  
    printf("\nSorted array is \n"); 
    printArray(arr, n); 
    cout<<"Time taken by program is : "<<fixed<<time_taken<<setprecision(5);   
    cout<<" sec "<<endl;
    return 0; 
} 
